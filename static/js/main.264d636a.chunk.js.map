{"version":3,"sources":["components/Contacts/ContactList.module.css","components/Filter/Filter.module.css","redux/actions.js","redux/operations.js","redux/selectors.js","components/Contacts/ContactList.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","App.js","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contacts","completed","actions","post","then","data","catch","error","id","delete","get","getContacts","state","items","getFilter","filter","getVisibleContacts","contact","toLowerCase","includes","ContactList","fetchContacts","useSelector","useDispatch","useEffect","operations","className","styles","list","map","phone","item","text","btn","onClick","deleteContact","Filter","wrapper","type","value","onChange","e","target","ContactForm","onAdd","prodIdName","uuid","prodIdNumber","useState","setContact","setName","setNumber","handleChange","resetForm","form","onSubmit","preventDefault","find","alert","console","log","htmlFor","pattern","title","required","submit","App","container","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,2B,mBCA1FD,EAAOC,QAAU,CAAC,QAAU,0B,yJCEfC,EAAuBC,YAClC,iCAEWC,EAAuBD,YAClC,iCAEWE,EAAqBF,YAAa,+BAahC,GACbG,mBAZgCH,YAAa,+BAa7CI,mBAZgCJ,YAAa,+BAa7CK,iBAZ8BL,YAAa,6BAa3CM,sBAXmCN,YAAa,yBAYhDO,sBAXmCP,YACnC,kCAWAQ,oBATiCR,YAAa,gCAU9CD,uBACAE,uBACAC,qBACAO,aAZ0BT,YAAa,0BChBzCU,IAAMC,SAASC,QACb,wDAEF,IA6Be,EApBI,SAACC,EAAMC,GAAP,OAAkB,SAAAC,GACnC,IAAMC,EAAW,CAAEH,OAAMC,SAAQG,WAAW,GAE5CF,EAASG,EAAQf,sBAEjBO,IACGS,KAAK,YAAaH,GAClBI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcN,EAASG,EAAQd,mBAAmBiB,OACvDC,OAAM,SAAAC,GAAK,OAAIR,EAASG,EAAQb,iBAAiBkB,SAYvC,EATO,SAAAC,GAAE,OAAI,SAAAT,GAC1BA,EAASG,EAAQZ,yBAEjBI,IACGe,OADH,oBACuBD,IACpBJ,MAAK,kBAAML,EAASG,EAAQX,sBAAsBiB,OAClDF,OAAM,SAAAC,GAAK,OAAIR,EAASG,EAAQV,oBAAoBe,SAG1C,EA7BO,kBAAM,SAAAR,GAC1BA,EAASG,EAAQnB,wBAEjBW,IACGgB,IAAI,aACJN,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcN,EAASG,EAAQjB,qBAAqBoB,OACzDC,OAAM,SAAAC,GAAK,OAAIR,EAASG,EAAQhB,mBAAmBqB,SCb3CI,EAAc,SAAAC,GAAK,OAAIA,EAAMZ,SAASa,OACtCC,EAAY,SAAAF,GAAK,OAAIA,EAAMZ,SAASe,QAEpCC,EAAqB,SAAAJ,GAChC,IAAMZ,EAAWW,EAAYC,GACvBG,EAASD,EAAUF,GAEzB,OAAOZ,EAASe,QAAO,SAAAE,GAAO,OAC5BA,EAAQpB,KAAKqB,cAAcC,SAASJ,EAAOG,mB,OCyChCE,EAxCK,SAAAC,GAClB,IAAMrB,EAAWsB,YAAYN,GACvBjB,EAAWwB,cAGjBC,qBAAU,kBAAMzB,EAAS0B,OAA6B,CAAC1B,IAGvD,OACE,oBAAI2B,UAAWC,IAAOC,KAAtB,SACG5B,EAAS6B,KAAI,gBAAGrB,EAAH,EAAGA,GAAIX,EAAP,EAAOA,KAAMiC,EAAb,EAAaA,MAAb,OACZ,qBAAaJ,UAAWC,IAAOI,KAA/B,UACE,oBAAGL,UAAWC,IAAOK,KAArB,UACGnC,EADH,MACYiC,KAEZ,wBAAQJ,UAAWC,IAAOM,IAAKC,QAAS,kBAR1B,SAAA1B,GAAE,OAAIT,EAAS0B,EAAyBjB,IAQR2B,CAAc3B,IAA5D,sBAJOA,S,iBCoBF4B,EAjCA,WACb,IAAMpC,EAAWsB,YAAYR,GACvBf,EAAWwB,cAEjB,OACE,qBAAKG,UAAWC,IAAOU,QAAvB,SACE,kCACE,uDACA,uBACEC,KAAK,OACLC,MAAOvC,EACPwC,SAAU,SAAAC,GAAC,OAAI1C,EAASG,EAAQT,aAAagD,EAAEC,OAAOH,iB,gCC+DjDI,EA1EK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf7C,EAAWwB,cACXvB,EAAWsB,YAAYX,GAEvBkC,EAAaC,cACbC,EAAeD,cAErB,EAA8BE,mBAAS,MAAvC,mBAAO/B,EAAP,KAAgBgC,EAAhB,KACA,EAAwBD,mBAAS,IAAjC,mBAAOnD,EAAP,KAAaqD,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOlD,EAAP,KAAeqD,EAAf,KAEMC,EAAe,SAAAX,GACnB,MAAwBA,EAAEC,OAAlB7C,EAAR,EAAQA,KAAM0C,EAAd,EAAcA,MACd,OAAQ1C,GACN,IAAK,OACHqD,EAAQX,GACR,MACF,IAAK,SACHY,EAAUZ,KAoBVc,EAAY,WAChBH,EAAQ,IACRC,EAAU,KAEZ,OACE,uBAAMzB,UAAWC,IAAO2B,KAAMC,SApBX,SAAAd,GACnBA,EAAEe,iBAGAxD,EAASyD,MACP,SAAAxC,GAAO,OAAIA,EAAQpB,KAAKqB,gBAAkBrB,EAAKqB,iBAGjDwC,MAAM,GAAD,OAAI7D,EAAJ,qCACAE,EAAS0B,EAAsB5B,EAAMC,IAE5CmD,EAAWhC,GACXoC,IACAM,QAAQC,IAAI,cAAehB,IAO3B,UACE,uBAAOiB,QAAShB,EAAhB,kBACA,uBACErC,GAAIqC,EACJP,KAAK,OACLzC,KAAK,OACL0C,MAAO1C,EACPiE,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRxB,SAAUY,IAEZ,uBACA,uBAAOS,QAASd,EAAhB,oBACA,uBACEvC,GAAIuC,EACJT,KAAK,MACLzC,KAAK,SACL0C,MAAOzC,EACPgE,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRxB,SAAUY,IAEZ,wBAAQd,KAAK,SAASZ,UAAWC,IAAOsC,OAAxC,6BCnES,SAASC,IAmCtB,OACE,sBAAKxC,UAAWC,IAAOwC,UAAvB,UACE,oBAAIzC,UAAWC,IAAOoC,MAAtB,uBACA,cAAC,EAAD,IACA,0CAEA,cAAC,EAAD,IAEA,cAAC,EAAD,O,8BC7CJ5E,EAUEe,EAVFf,mBACAC,EASEc,EATFd,mBACAC,EAQEa,EARFb,iBACAC,EAOEY,EAPFZ,sBACAC,EAMEW,EANFX,sBACAC,EAKEU,EALFV,oBACAT,EAIEmB,EAJFnB,qBACAE,EAGEiB,EAHFjB,qBACAC,EAEEgB,EAFFhB,mBACAO,EACES,EADFT,aAUIoB,EAAQuD,YAAc,IAAD,mBACxBnF,GAAuB,SAACoF,EAAD,YAAMC,WADL,cAExBlF,GAAqB,SAACwB,EAAD,OAAU0D,EAAV,EAAUA,QAAV,4BAA4B1D,GAA5B,CAAmC0D,OAFhC,cAGxB/E,GAAwB,SAACqB,EAAD,OAAU0D,EAAV,EAAUA,QAAV,OACvB1D,EAAMG,QAAO,SAAAE,GAAO,OAAIA,EAAQT,KAAO8D,QAJhB,IAOrBC,EAAUH,aAAc,GAAD,mBAC1BjF,GAAqB,kBAAM,KADD,cAE1BC,GAAqB,kBAAM,KAFD,cAG1BC,GAAmB,kBAAM,KAHC,cAI1BC,GAAwB,kBAAM,KAJJ,cAK1BC,GAAwB,kBAAM,KALJ,cAM1BC,GAAsB,kBAAM,KANF,cAO1BT,GAAuB,kBAAM,KAPH,cAQ1BE,GAAuB,kBAAM,KARH,cAS1BC,GAAqB,kBAAM,KATD,IAWvB6B,EAASqD,YAAc,GAAD,eACzB3E,GAAe,SAAC4E,EAAD,YAAMC,YAGTE,cAAgB,CAC7B3D,QACAE,SACAwD,Y,OC/BIE,GAAU,YACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAajDC,GARDC,YAAe,CAC3BC,QAAS,CAAErF,SAAUqF,GACrBZ,cACAa,UAAUC,ICrBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SAEE,cAACjB,EAAD,QAIJyB,SAASC,eAAe,U,kBCf1B/G,EAAOC,QAAU,CAAC,UAAY,+BAA+B,KAAO,0BAA0B,OAAS,+B","file":"static/js/main.264d636a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__2FfXx\",\"text\":\"ContactList_text__Ku9zM\",\"btn\":\"ContactList_btn__3cLFB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__Asx2n\"};","/* eslint-disable import/no-anonymous-default-export */\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\nexport const addContactsError = createAction('contacts/addContactsError');\n\nexport const deleteContactsRequest = createAction('deleteContactsRequest');\nexport const deleteContactsSuccess = createAction(\n  'contacts/deleteContactsSuccess',\n);\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\nexport const changeFilter = createAction('contacts/changeFilter');\n\nexport default {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  changeFilter,\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport axios from 'axios';\nimport actions from './actions';\n\naxios.defaults.baseURL =\n  'https://619aab5727827600174452e9.mockapi.io/contacts/';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(actions.fetchContactsRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n    .catch(error => dispatch(actions.fetchContactsError(error)));\n};\n\nconst addContact = (name, number) => dispatch => {\n  const contacts = { name, number, completed: false };\n\n  dispatch(actions.addContactsRequest());\n\n  axios\n    .post('/contacts', contacts)\n    .then(({ data }) => dispatch(actions.addContactsSuccess(data)))\n    .catch(error => dispatch(actions.addContactsError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(actions.deleteContactsRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.deleteContactsSuccess(id)))\n    .catch(error => dispatch(actions.deleteContactsError(error)));\n};\n\nexport default { addContact, deleteContact, fetchContacts };\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n","import React from 'react';\nimport styles from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport operations from '../../redux/operations';\nimport { getVisibleContacts } from '../../redux/selectors';\n// import { connect } from 'react-redux';\nimport { useEffect } from 'react';\n\nconst ContactList = fetchContacts => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  // fetchContacts();\n\n  useEffect(() => dispatch(operations.fetchContacts()), [dispatch]);\n\n  const deleteContact = id => dispatch(operations.deleteContact(id));\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, name, phone }) => (\n        <li key={id} className={styles.item}>\n          <p className={styles.text}>\n            {name} : {phone}\n          </p>\n          <button className={styles.btn} onClick={() => deleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.any.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onClick: PropTypes.func.isRequired,\n};\n\n// const mapDispatchToProps = dispatch => ({\n//   fetchContacts: () => dispatch(operations.fetchContacts()),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactList);\nexport default ContactList;\n","import React from 'react';\nimport styles from './Filter.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport actions from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\n\nconst Filter = () => {\n  const contacts = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.wrapper}>\n      <label>\n        <h3>Find contacts by name</h3>\n        <input\n          type=\"text\"\n          value={contacts}\n          onChange={e => dispatch(actions.changeFilter(e.target.value))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  contacts: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(actions.changeFilter(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nexport default Filter;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\nimport styles from './ContactForm.module.css';\nimport operations from '../../redux/operations';\nimport { getContacts } from '../../redux/selectors';\n\nconst ContactForm = ({ onAdd }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const prodIdName = uuid();\n  const prodIdNumber = uuid();\n\n  const [contact, setContact] = useState(null);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} contact is already on your list`);\n    } else dispatch(operations.addContact(name, number));\n\n    setContact(contact);\n    resetForm();\n    console.log('ADD ACTIONS', onAdd);\n  };\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label htmlFor={prodIdName}>Name</label>\n      <input\n        id={prodIdName}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleChange}\n      />\n      <br />\n      <label htmlFor={prodIdNumber}>Number</label>\n      <input\n        id={prodIdNumber}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className={styles.submit}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// import { useState, useEffect } from 'react';\nimport ContactList from './components/Contacts/ContactList';\nimport Filter from './components/Filter/Filter';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport styles from './components/ContactForm/ContactForm.module.css';\n// import contactsArray from './components/contacts.json';\n\nexport default function App() {\n  // const useLS = contactsArray => {\n  //   const [contacts, setContacts] = useState(\n  //     () =>\n  //       JSON.parse(window.localStorage.getItem('contacts')) ?? contactsArray,\n  //   );\n  //   useEffect(() => {\n  //     localStorage.setItem('contacts', JSON.stringify(contacts));\n  //   }, [contacts]);\n  //   return [contacts, setContacts];\n  // };\n\n  // const [contacts, setContacts] = useLS(contactsArray);\n  // const [filter, setFilter] = useState('');\n\n  // const addNewContact = obj => {\n  //   if (\n  //     contacts.find(\n  //       contact => contact.name.toLowerCase() === obj.name.toLowerCase(),\n  //     )\n  //   ) {\n  //     alert(`${obj.name} is already in contacts`);\n  //   } else setContacts(prev => [...prev, obj]);\n  // };\n  // const deleteContact = contactId => {\n  //   setContacts(contacts.filter(contact => contact.id !== contactId));\n  // };\n  // const onChangeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // };\n  // const visibleContacts = () => {\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase()),\n  //   );\n  // };\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n\n      <Filter />\n\n      <ContactList />\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  changeFilter,\n} = actions;\n\n// const initState = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactsSuccess]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [addContactsRequest]: () => true,\n  [addContactsSuccess]: () => false,\n  [addContactsError]: () => false,\n  [deleteContactsRequest]: () => true,\n  [deleteContactsSuccess]: () => false,\n  [deleteContactsError]: () => false,\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n});\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport reducer from './reducer';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\n/////for local storage\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: { contacts: reducer },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__2H6uj\",\"form\":\"ContactForm_form__3jZHI\",\"submit\":\"ContactForm_submit__PSdTz\"};"],"sourceRoot":""}